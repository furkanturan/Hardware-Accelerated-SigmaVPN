
// #include <stdio.h>
// #include <fcntl.h>
// #include <string.h>
// #include <stdlib.h>
// #include <sys/time.h>
// #include <unistd.h>
// #include <sys/mman.h>
// #include <errno.h>

// unsigned long tStart, tEnd;
// unsigned long data;

// unsigned long getTime(){
// 	struct timeval temp;

// 	gettimeofday(&temp, NULL);

// 	return temp.tv_sec * 1000 * 1000 + temp.tv_usec;
// }

// void report(char *msg, unsigned long data, unsigned long time, unsigned long dmaUsed){
// 	printf("%s\t%ld\t%ld\t%f\t%d\n", msg, data, time, data * 1.0 / time, dmaUsed);
// 	FILE *f = fopen("report.dat", "a");
// 	fprintf(f, "%s\t%ld\t%ld\t%f\t%d\n", msg, data, time, data * 1.0 / time, dmaUsed);
// 	fclose(f);
// }

// #define REPORT(f, timeStart, timeEnd, dataPtr, msg, dmaUsed) *timeStart = getTime(); f; *timeEnd = getTime(); report(msg, 0, *timeEnd - *timeStart, dmaUsed);

///////////////////////////////////

// static inline unsigned int get_cyclecount (void)
// {
// 	unsigned int value;
// 	// Read CCNT Register
// 	asm volatile ("MRC p15, 0, %0, c9, c13, 0\t\n": "=r"(value));
// 	return value;
// }

// static inline void init_perfcounters (int32_t do_reset, int32_t enable_divider)
// {
//   // in general enable all counters (including cycle counter)
//   int32_t value = 1;

//   // peform reset:
//   if (do_reset)
//   {
//     value |= 2;     // reset all counters to zero.
//     value |= 4;     // reset cycle counter to zero.
//   }

//   if (enable_divider)
//     value |= 8;     // enable "by 64" divider for CCNT.

//   value |= 16;

//   // program the performance-counter control-register:
//   asm volatile ("MCR p15, 0, %0, c9, c12, 0\t\n" :: "r"(value));

//   // enable all counters:
//   asm volatile ("MCR p15, 0, %0, c9, c12, 1\t\n" :: "r"(0x8000000f));

//   // clear overflows:
//   asm volatile ("MCR p15, 0, %0, c9, c12, 3\t\n" :: "r"(0x8000000f));
// }

/////////////////////////////////////////

// void hw_salsa(void)
// {
//     unsigned int overhead, t;

//     int i, fd;

//     unsigned int *buffer;

//     buffer = (unsigned int *) malloc(sizeof(unsigned int) * 144);

//     buffer[0] = 0x00400001;

//     buffer[1] = 0x00000000;
//     buffer[2] = 0x01000000;
//     buffer[3] = 0x00000000;
//     buffer[4] = 0x00000000;
//     buffer[5] = 0x00000000;
//     buffer[6] = 0x00000000;

//     buffer[7] = 0xbc56f397;
//     buffer[8] = 0x1f0b2b49;
//     buffer[9] = 0x626e60ca;
//     buffer[10] = 0xf3ba5a23;
//     buffer[11] = 0x17a1d7a0;
//     buffer[12] = 0x09b0327d;
//     buffer[13] = 0x3b1bc179;
//     buffer[14] = 0x3a41a11b;

//     buffer[15] = 0x65726f4c;
//     buffer[16] = 0x7069206d;
//     buffer[17] = 0x206d7573;
//     buffer[18] = 0x6f6c6f64;
//     buffer[19] = 0x69732072;
//     buffer[20] = 0x6d612074;
//     buffer[21] = 0x202c7465;
//     buffer[22] = 0x736e6f63;
//     buffer[23] = 0x65746365;
//     buffer[24] = 0x20727574;
//     buffer[25] = 0x70696461;
//     buffer[26] = 0x69637369;
//     buffer[27] = 0x6520676e;
//     buffer[28] = 0x2e74696c;
//     buffer[29] = 0x73755320;
//     buffer[30] = 0x646e6570;
//     buffer[31] = 0x65737369;
//     buffer[32] = 0x6e6f6e20;
//     buffer[33] = 0x73616d20;
//     buffer[34] = 0x76206173;
//     buffer[35] = 0x65206c65;
//     buffer[36] = 0x206d696e;
//     buffer[37] = 0x706d6573;
//     buffer[38] = 0x70207265;
//     buffer[39] = 0x6563616c;
//     buffer[40] = 0x20746172;
//     buffer[41] = 0x76207475;
//     buffer[42] = 0x73206c65;
//     buffer[43] = 0x65697061;
//     buffer[44] = 0x51202e6e;
//     buffer[45] = 0x71736975;
//     buffer[46] = 0x65206575;
//     buffer[47] = 0x656d656c;
//     buffer[48] = 0x6d75746e;
//     buffer[49] = 0x6964202c;
//     buffer[50] = 0x71206d61;
//     buffer[51] = 0x20736975;
//     buffer[52] = 0x646e6f63;
//     buffer[53] = 0x6e656d69;
//     buffer[54] = 0x206d7574;
//     buffer[55] = 0x636e6974;
//     buffer[56] = 0x6e756469;
//     buffer[57] = 0x6e202c74;
//     buffer[58] = 0x616c6c75;
//     buffer[59] = 0x726f7420;
//     buffer[60] = 0x20726f74;
//     buffer[61] = 0x73656765;
//     buffer[62] = 0x20736174;
//     buffer[63] = 0x6d617571;
//     buffer[64] = 0x6576202c;
//     buffer[65] = 0x6870206c;
//     buffer[66] = 0x74657261;
//     buffer[67] = 0x6c206172;
//     buffer[68] = 0x72656269;
//     buffer[69] = 0x656c206f;
//     buffer[70] = 0x6765206f;
//     buffer[71] = 0x6c207465;
//     buffer[72] = 0x73756361;
//     buffer[73] = 0x6f44202e;
//     buffer[74] = 0x2063656e;
//     buffer[75] = 0x20646573;
//     buffer[76] = 0x6c656373;
//     buffer[77] = 0x73697265;
//     buffer[78] = 0x20657571;
//     buffer[79] = 0x6c6c756e;
//     buffer[80] = 0x56202e61;
//     buffer[81] = 0x69747365;
//     buffer[82] = 0x756c7562;
//     buffer[83] = 0x7572206d;
//     buffer[84] = 0x6d757274;
//     buffer[85] = 0x73657620;
//     buffer[86] = 0x75626974;
//     buffer[87] = 0x206d756c;
//     buffer[88] = 0x75737069;
//     buffer[89] = 0x65202c6d;
//     buffer[90] = 0x6c752074;
//     buffer[91] = 0x636d616c;
//     buffer[92] = 0x6570726f;
//     buffer[93] = 0x756e2072;
//     buffer[94] = 0x20616c6c;
//     buffer[95] = 0x74657270;
//     buffer[96] = 0x206d7569;
//     buffer[97] = 0x202e6469;
//     buffer[98] = 0x73617243;
//     buffer[99] = 0x6c206120;
//     buffer[100] = 0x6d65726f;
//     buffer[101] = 0x67756120;
//     buffer[102] = 0x202e6575;
//     buffer[103] = 0x73617243;
//     buffer[104] = 0x20746520;
//     buffer[105] = 0x65766976;
//     buffer[106] = 0x20617272;
//     buffer[107] = 0x636e756e;
//     buffer[108] = 0x656e202c;
//     buffer[109] = 0x69742063;
//     buffer[110] = 0x6469636e;
//     buffer[111] = 0x20746e75;
//     buffer[112] = 0x7563616c;
//     buffer[113] = 0x4d202e73;
//     buffer[114] = 0x69727561;
//     buffer[115] = 0x69762073;
//     buffer[116] = 0x20656174;
//     buffer[117] = 0x616e7275;
//     buffer[118] = 0x20746120;
//     buffer[119] = 0x7463656c;
//     buffer[120] = 0x76207375;
//     buffer[121] = 0x75706c75;
//     buffer[122] = 0x65746174;
//     buffer[123] = 0x65676520;
//     buffer[124] = 0x73617473;
//     buffer[125] = 0x6956202e;
//     buffer[126] = 0x756d6176;
//     buffer[127] = 0x74652073;
//     buffer[128] = 0x616c6220;
//     buffer[129] = 0x7469646e;
//     buffer[130] = 0x726f7420;
//     buffer[131] = 0x2e726f74;
//     buffer[132] = 0x6e6f4420;
//     buffer[133] = 0x61206365;
//     buffer[134] = 0x6c622063;
//     buffer[135] = 0x69646e61;
//     buffer[136] = 0x75702074;
//     buffer[137] = 0x2c737572;
//     buffer[138] = 0x63616c20;
//     buffer[139] = 0x61696e69;
//     buffer[140] = 0x73616d20;
//     buffer[141] = 0x6e206173;
//     buffer[142] = 0x2e636e75;
//     buffer[143] = 0x62757000;


//     printf("Opening\n");

//     fd = open("/dev/axi-dma1", O_RDWR);

// 		    // init_perfcounters (1, 0);

// 		    // overhead = get_cyclecount();
// 		    // overhead = get_cyclecount() - overhead;

// 		    // init_perfcounters (1, 0);

// 			// t = get_cyclecount();
            
//     printf("Writing\n");
//     write(fd, buffer, 64+60);

// 		    // t = get_cyclecount() - t;

// 		    // printf ("function took exactly %d cycles (including function call) \n", t - overhead);


//     // REPORT(
//     //     write(fd, bufferIN, 64)
//     //     , &tStart, &tEnd, &data, "HM", 1);
// 	//
//     // write(fd, bufferIN, 64);

//     printf("Closing\n");
//     close(fd);

    
//     printf("Printing\n");
//     for(i=0; i<144; i++)
//     {
//          printf("x%d = \t0x%08x\n", i, buffer[i]);   
//     }
// }

// struct dma_regs {
//     void *mem;
//     size_t len;
// };

// struct dma_device {
//     struct dma_regs reg;
//     //struct a2gx_eth_mac mac;
//     //struct a2gx_rx rx;
//     //struct a2gx_tx tx;
//     int fd;
// };



#include <sodium.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <fcntl.h>
#include <sys/time.h>
#include <unistd.h>
#include <sys/mman.h>
#include <errno.h>


////////////////////////////

static inline unsigned int get_cyclecount (void)
{
    unsigned int value;
    // Read CCNT Register
    asm volatile ("MRC p15, 0, %0, c9, c13, 0\t\n": "=r"(value));
    return value;
}

static inline void init_perfcounters (int32_t do_reset, int32_t enable_divider)
{
    // in general enable all counters (including cycle counter)
    int32_t value = 1;

    // peform reset:
    if (do_reset)
    {
        value |= 2;     // reset all counters to zero.
        value |= 4;     // reset cycle counter to zero.
    }

    if (enable_divider)
    value |= 8;     // enable "by 64" divider for CCNT.

    value |= 16;

    // program the performance-counter control-register:
    asm volatile ("MCR p15, 0, %0, c9, c12, 0\t\n" :: "r"(value));

    // enable all counters:
    asm volatile ("MCR p15, 0, %0, c9, c12, 1\t\n" :: "r"(0x8000000f));

    // clear overflows:
    asm volatile ("MCR p15, 0, %0, c9, c12, 3\t\n" :: "r"(0x8000000f));
}

////////////////////////////

unsigned char precomp[crypto_box_BEFORENMBYTES];
unsigned char *buffer;

void NaCl_CryptoBox_Init()
{
    unsigned char pk[crypto_box_PUBLICKEYBYTES];
    unsigned char sk[crypto_box_SECRETKEYBYTES];
    unsigned int i;

    crypto_box_keypair(pk, sk);
    
    printf("\nPRIVATE KEY: ");
    for (i = 0; i < crypto_box_SECRETKEYBYTES; i ++)
        printf("%02x", sk[i]);

    printf("\n PUBLIC KEY: ");
    for (i = 0; i < crypto_box_PUBLICKEYBYTES; i ++)
        printf("%02x", pk[i]);
    
    if(  crypto_box_beforenm(   precomp,
                                pk,
                                sk )
    )
    
        printf("Beforenm Failed");
    
    
    printf("\n PRECOMP: ");
    for (i = 0; i < crypto_box_BEFORENMBYTES; i ++)
    {
        printf("%02x", precomp[i]);
    }
}

void NaCl_CryptoBox_SW_ENCRYPT( unsigned char* ct,
                                unsigned char* pt,
                                unsigned short  len,
                                unsigned char* nonce,
                                unsigned char* mac)
{ 
    uint8_t tempbufferpt[len + crypto_box_ZEROBYTES];
    bzero(tempbufferpt, crypto_box_ZEROBYTES);
    memcpy(tempbufferpt + crypto_box_ZEROBYTES, pt, len);
    
    unsigned int msglen = len + crypto_box_ZEROBYTES; 
    
    uint8_t tempbufferct[len + crypto_box_ZEROBYTES];
    
    if( 
        
        crypto_box_afternm( tempbufferct,
                            tempbufferpt,
                            msglen,
                            nonce,
                            precomp) 
      )
        printf("\nEncryption failed");
    
    memcpy(mac, tempbufferct + crypto_box_MACBYTES, crypto_box_MACBYTES);   
    memcpy(ct, tempbufferct + crypto_box_ZEROBYTES, len); 
          
}

void NaCl_CryptoBox_SW_DECRYPT( unsigned char* ct,
                                unsigned char* pt,
                                unsigned short  len,
                                unsigned char* nonce,
                                unsigned char* mac)
{
    int i;
    
    uint8_t tempbufferct[len + crypto_box_ZEROBYTES];
    bzero(tempbufferct, crypto_box_ZEROBYTES);  
    
    memcpy(tempbufferct + crypto_box_MACBYTES, mac, crypto_box_MACBYTES);  
    memcpy(tempbufferct + crypto_box_ZEROBYTES, ct, len);  
    
    unsigned int msglen = len + crypto_box_ZEROBYTES; 
    
    uint8_t tempbufferpt[len + crypto_box_ZEROBYTES];
    
    printf("\n CT: 0x");
    for (i = 0; i < len + crypto_box_ZEROBYTES; i ++)
        printf("%02x", tempbufferct[i]); 
    
    if( 
        
        crypto_box_open_afternm( tempbufferpt,
                                 tempbufferct,
                                 msglen,
                                 nonce,
                                 precomp) 
      )
        printf("\nDecryption failed");
    
    memcpy(pt, tempbufferpt + crypto_box_ZEROBYTES, len);       
}




void NaCl_CryptoBox_HW_Init(unsigned char* nonce)
{
    unsigned int i;

    buffer = (unsigned char *) malloc(sizeof(unsigned char) * 1536+60);

    
}


void NaCl_CryptoBox_HW_ENCRYPT( unsigned char* ct,
                                unsigned char* pt,
                                unsigned short  len,
                                unsigned char* nonce,
                                unsigned char* mac)
{
    unsigned char extrabytes;
    int i, j, fd;
        
    buffer[0] = 1;
    buffer[1] = 0;
    buffer[2] = len;
    buffer[3] = len>>8;
    
    memcpy(buffer+4, nonce, crypto_box_NONCEBYTES);
    memcpy(buffer+60, pt, len);
    memset(buffer+60+len, 0, 4);
    
    // printf("\nINPUTS\n");
    // for (i = 0; i < (len+60)/4+1; i++)
    // {
    //     //printf("buffer[%d] = 0x", cnt); 
    //     //for (j = 0; j <4; j++)
    //     for (j = 3; j >=0; j--)
    //     {
    //         printf("%02x", buffer[i*4+j]);
    //     }        
    //     printf("\n");
    // }
    // printf("\n");
    
    fd = open("/dev/axi-dma1", O_RDWR);
    write(fd, buffer, 32);
    close(fd);
    
    extrabytes = 4 - (len % 4);
    if(extrabytes == 4)    extrabytes = 0;

    
    memcpy(ct, buffer, len);
    memcpy(mac, buffer + extrabytes + len, crypto_box_MACBYTES);   
}

void enablePerfCounters()
{
    unsigned int *bufferIN;
    bufferIN = (unsigned int *) malloc(sizeof(unsigned int) * 16);
    int fd = open("/dev/axi-dma1", O_RDWR);
    read(fd, bufferIN, 64);
    close(fd);    
}

int main(int argc, char **argv)
{
    if (argc == 0)
    {
        printf("Forgot to set the length");
        return -1;
    }
    
    unsigned int i;
    unsigned int len = atoi(argv[1]);
                    
            unsigned int overhead, t;

    unsigned char* output;
    unsigned char* input;
    unsigned char* input2;
    unsigned char* nonce;
    unsigned char* mac;
    
    output  = malloc( len * 2 * sizeof(unsigned char));
    input   = malloc( len * sizeof(unsigned char));
    input2   = malloc( len * sizeof(unsigned char));
    nonce   = malloc(crypto_box_NONCEBYTES  * sizeof(unsigned char));
    mac     = malloc(crypto_box_MACBYTES    * sizeof(unsigned char));
    
    for (i=0; i < len; i++)
    {
        input[i] = rand();
        input2[i] = input[i];
    }
       
    for (i=0; i < crypto_box_NONCEBYTES; i++)
        nonce[i] = rand();
        
    
    printf("\n NONCE: ");
    for (i = 0; i < crypto_box_NONCEBYTES; i ++)
    {
        printf("%02x", nonce[i]);
    }


    NaCl_CryptoBox_Init();
    
    NaCl_CryptoBox_HW_Init(nonce);
    
    
    
            // enablePerfCounters();

            // init_perfcounters (1, 0);

            // overhead = get_cyclecount();
            // overhead = get_cyclecount() - overhead;

            // init_perfcounters (1, 0);

            // t = get_cyclecount();


    // NaCl_CryptoBox_SW_ENCRYPT(output, input, len, nonce, mac);
    
    //         // t = get_cyclecount() - t;

	// 	    //printf ("\nfunction took exactly %d cycles (including function call) \n", t - overhead);
    
    // // printf("\n OUTPUT: 0x");
    // // for (i = 0; i < len; i++)
    // //     printf("%02x", output[i]);
    
    // printf("\n MAC: 0x");
    // for (i = 0; i < crypto_box_MACBYTES; i++)
    //     printf("%02x", mac[i]);  
    
    
    // memset(output, 0, len);    
    // memset(mac, 0, crypto_box_MACBYTES);
    
    
            // init_perfcounters (1, 0);

            // t = get_cyclecount();    
    
    
    printf("\nFIRST ROUND"); 
    
    printf("\nNONCE: ");
    for (i = 0; i < crypto_box_NONCEBYTES; i ++)
    {
        printf("%02x", nonce[i]);
    }
    
    printf("\n INPUT: 0x");
    for (i = 0; i < len; i++)
        printf("%02x", input[i]); 
    
    memcpy(buffer+28, precomp, crypto_box_BEFORENMBYTES);
    NaCl_CryptoBox_HW_ENCRYPT(output, input, len, nonce, mac);
    
            // t = get_cyclecount() - t;

		    // printf ("\nfunction took exactly %d cycles (including function call) \n", t - overhead);
        
    printf("\n OUTPUT: 0x");
    for (i = 0; i < len; i ++)
        printf("%02x", output[i]);      
    
    printf("\n MAC: 0x");
    for (i = 0; i < crypto_box_MACBYTES; i ++)
        printf("%02x", mac[i]);  
    
    memset(input, 0, len);
    
    NaCl_CryptoBox_SW_DECRYPT(output, input, len, nonce, mac);    
        
        
    memset(output, 0, len);    
    memset(mac, 0, crypto_box_MACBYTES);
        
        
        
        
        
    printf("\n\n\n SECOND ROUND");        
    
    printf("\nNONCE: ");
    for (i = 0; i < crypto_box_NONCEBYTES; i ++)
    {
        printf("%02x", nonce[i]);
    }
      
    printf("\n INPUT: 0x");
    for (i = 0; i < len; i++)
        printf("%02x", input2[i]); 
        
    memcpy(buffer+28, precomp, crypto_box_BEFORENMBYTES);
    NaCl_CryptoBox_HW_ENCRYPT(output, input2, len, nonce, mac);
           
    printf("\n OUTPUT: 0x");
    for (i = 0; i < len; i ++)
        printf("%02x", output[i]);        
    
    printf("\n MAC: 0x");
    for (i = 0; i < crypto_box_MACBYTES; i ++)
        printf("%02x", mac[i]);  
    
    memset(input2, 0, len);
        
    NaCl_CryptoBox_SW_DECRYPT(output, input2, len, nonce, mac);    
        
        
        
        
        
        
        
        
   
    // printf("\n INPUT: 0x");
    // for (i = 0; i < len; i++)
    //     printf("%02x", input[i]); 
    
    // printf("\n");  
    
	// struct dma_device *dev;
	
	// dev = (struct dma_device*)malloc(sizeof(struct dma_device));
	
	// dev->fd = open("/dev/axi-dma1", O_RDWR);
	
	// //mmap (caddr_t addr, size_t len, int prot, int flags, int fd, off_t offset)
	
	// dev->reg.mem = mmap(NULL, 64, PROT_READ | PROT_WRITE, MAP_SHARED, dev->fd, 0);
	
	
    // close(dev->fd);



    // unsigned int *bufferIN;

    // bufferIN = (unsigned int *) malloc(sizeof(unsigned int) * 16);
    // int fd = open("/dev/axi-dma1", O_RDWR);
    // read(fd, bufferIN, 64);
    // close(fd);

    

    //printf("HARDWARE TEST\n\n");

    //hw_salsa();

    return 0;
}
