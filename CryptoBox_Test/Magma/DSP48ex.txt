https://forums.xilinx.com/t5/Synthesis/DSP48-use-inference/td-p/105969

CODE 1:

module multiplier(
    input CLK,
  input RST,
    input [17:0] A_IN,
    input [17:0] B_IN,
    output reg[35:0] PROD_OUT
    );

 wire[47:0] POUT_1;

 DSP48 #(
   .AREG(1),
   .BREG(1),
   .B_INPUT("DIRECT"),
   .CARRYINREG(0),
   .CARRYINSELREG(0),
   .CREG(0),
   .LEGACY_MODE("MULT18X18S"),
   .MREG(1),
   .OPMODEREG(0),
   .PREG(1),
   .SUBTRACTREG(0)
)
DSP48_1
  (
    .A(A_IN),        // Input A to Multiplier
    .B(B_IN),              // Input B to Multiplier
    .C(48'b0),             // Input C to Adder
    .BCIN(18'b0),           //
    .PCIN(48'b0),           //
    .OPMODE(7'b0000101),   //
    .SUBTRACT(1'b0),       //
    .CARRYIN(1'b0),        //
    .CARRYINSEL(2'b00),    //
    .CLK(CLK),             //
    .CEA(1'b1),            //
    .CEB(1'b1),            //
    .CEC(1'b0),            //
    .CEP(1'b1),            //
    .CEM(1'b1),            //
    .CECTRL(1'b0),         //
    .CECARRYIN(1'b0),      //
    .CECINSUB(1'b1),       //
    .RSTA(RST),            //
    .RSTB(RST),            //
    .RSTC(RST),            //
    .RSTP(RST),            //
    .RSTM(RST),            //
    .RSTCTRL(RST),         //
    .RSTCARRYIN(RST),      //
    .BCOUT(),              //
    .P(POUT_1),         //
    .PCOUT()               //
  );

/*
//synthesis translate_off
   defparam DSP48_1.AREG = 1;
   defparam DSP48_1.BREG = 1;
   defparam DSP48_1.B_INPUT = "DIRECT";
   defparam DSP48_1.CARRYINREG = 0;
   defparam DSP48_1.CARRYINSELREG = 0;
   defparam DSP48_1.CREG = 0;
   defparam DSP48_1.LEGACY_MODE = "MULT18X18S";
   defparam DSP48_1.MREG = 1;
   defparam DSP48_1.OPMODEREG = 0;
   defparam DSP48_1.PREG = 1;
   defparam DSP48_1.SUBTRACTREG = 0;
//synthesis translate_on
*/

always @(posedge CLK)
begin

 if(RST)

   PROD_OUT[35:0] <= 36'b0;

else
 PROD_OUT[35:0] <= POUT_1[35:0];
 end
endmodule



No. of DSP 48 used: 1



CODE 2:



  module multiplier(
    input CLK,
    input RST,
    input [17:0] A_IN,
    input [17:0] B_IN,
    output reg[35:0] PROD_OUT
    );



always @(posedge clk)
begin

  if (RST)

   PROD_OUT[35:0] <= 36'b0;

 else

    PROD_OUT[35:0] <= A_IN * B_IN;
 end

endmodule



No. of DSP 48 used: 4
