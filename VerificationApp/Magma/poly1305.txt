// Details are here: http://cr.yp.to/mac/poly1305-20050329.pdf

// Copy those from the C code or put an array

r := [ 254, 142, 225, 182, 78, 26, 171, 67, 99, 172, 60, 126, 110, 110, 74, 202 ];
s := [ 238, 243, 120, 238, 175, 14, 114, 24, 160, 71, 22, 136, 93, 0, 107, 146 ];
m := [ 24, 224, 196, 169, 80, 92, 203, 161, 232, 244, 240, 23, 212, 255, 244, 190, 95, 54, 98, 228, 126, 232, 7, 238, 40, 150, 248, 76, 191, 105, 32, 184, 79, 117, 182, 52, 212, 252, 162, 153, 178, 36, 64, 100, 1, 92, 8, 181, 234, 127, 35, 90, 105, 216, 233, 234, 129, 215, 191, 125, 199, 191, 202, 214 ];
mlen := 64 ;

////////////////////////////////////

// R is calculated here.

R :=         r[1]                 + 2^8   * r[2]  + 2^16  * r[3]  + 2^24  * (r[4]  mod 16) +
     2^32 * (r[5]  - r[5]  mod 4) + 2^40  * r[6]  + 2^48  * r[7]  + 2^56  * (r[8]  mod 16) +
     2^64 * (r[9]  - r[9]  mod 4) + 2^72  * r[10] + 2^80  * r[11] + 2^88  * (r[12] mod 16) +
     2^96 * (r[13] - r[13] mod 4) + 2^104 * r[14] + 2^112 * r[15] + 2^120 * (r[16] mod 16);

printf "R = %h\n", R;

////////////////////////////////////

// S is just made a long integer from the input.

S := 0;

for x in [1..16] do
    S := S + s[x] * 2^(8*(x-1));
end for;

printf "S = %h\n", S;

////////////////////////////////////

// q means how many sub blocks of 128 byte you will have

// A message of 64 bytes
q := mlen / 16;

printf "q = %o\n", q;

////////////////////////////////////

// This example is made for 4 blocks so 64 bytes of input
// C values are calculated here manually

C1 := 2^128;
C2 := 2^128;
C3 := 2^128;
C4 := 2^128;

for x in [1..16] do
    C1 := C1 + m[(x)     ] * 2^(8*(x-1));
    C2 := C2 + m[(x) + 16] * 2^(8*(x-1));
    C3 := C3 + m[(x) + 32] * 2^(8*(x-1));
    C4 := C4 + m[(x) + 48] * 2^(8*(x-1));
end for;

printf "C1 = %h\n", C1;
printf "C2 = %h\n", C2;
printf "C3 = %h\n", C3;
printf "C4 = %h\n", C4;

////////////////////////////////////

// The equation that gives the MAC is written here as it is written in the PDF

MAC := (((C1 * R^4 + C2 * R^3 + C3 * R^2 + C4 * R ) mod (2^130-5)) + S) mod 2^128;

printf "MAC = %h\n", MAC;
printf "\n";

////////////////////////////////////

// A better method of calculating the MAC is given below
// as it is discussed in the PDF.

ACC := 0;
ACC := ((ACC + C1) * R) mod (2^130-5);    printf "ACC = %h\n", ACC;
ACC := ((ACC + C2) * R) mod (2^130-5);    printf "ACC = %h\n", ACC;
ACC := ((ACC + C3) * R) mod (2^130-5);    printf "ACC = %h\n", ACC;
ACC := ((ACC + C4) * R) mod (2^130-5);    printf "ACC = %h\n", ACC;

ACC := (ACC + S) mod 2^128;               printf "ACC = %h\n", ACC;


